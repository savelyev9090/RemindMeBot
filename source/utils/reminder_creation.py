from datetime import datetime
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select
from database.config import Settings
from source.keyboards.reply import check_keyboard, main_menu
from source.utils.states import Reminder
from source.messages.templates import MESSAGES, BUTTONS
from database.database import Reminder as DBReminder

router = Router()

# –°–æ–∑–¥–∞–µ–º engine –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(Settings.DATABASE_URL, connect_args={"options": "-c timezone=utc"})
Session = sessionmaker(bind=engine)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
def is_future_datetime(date: datetime) -> bool:
    return date > datetime.now()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
def get_session():
    return Session()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.message(Reminder.enter_time)
async def process_reminder_time(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        reminder_time = datetime.strptime(user_input, "%H:%M").time()
        await state.update_data(reminder_time=reminder_time)
        await state.set_state(Reminder.enter_date)
        await message.answer(MESSAGES["prompt_date"])
    except ValueError:
        await message.answer(MESSAGES["invalid_format_time"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@router.message(Reminder.enter_date)
async def process_reminder_date(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        reminder_date = datetime.strptime(user_input, "%d.%m.%Y").date()
        user_data = await state.get_data()
        reminder_time = user_data["reminder_time"]

        reminder_datetime = datetime.combine(reminder_date, reminder_time)
        if not is_future_datetime(reminder_datetime):
            await message.answer(MESSAGES["past_reminder"])
            return

        await state.update_data(reminder_datetime=reminder_datetime)
        await state.set_state(Reminder.enter_title)
        await message.answer(MESSAGES["prompt_title"])
    except ValueError:
        await message.answer(MESSAGES["invalid_format_date"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(Reminder.enter_title)
async def process_reminder_title(message: Message, state: FSMContext):
    title = message.text.strip()
    if len(title) < 3:
        await message.answer(MESSAGES["too_short"])
        return

    await state.update_data(title=title)
    await state.set_state(Reminder.enter_description)
    await message.answer(MESSAGES["prompt_description"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(Reminder.enter_description)
async def process_reminder_description(message: Message, state: FSMContext):
    description = message.text.strip()
    if description.lower() == "–Ω–µ—Ç":
        description = None

    user_data = await state.get_data()
    reminder_datetime = user_data["reminder_datetime"]
    title = user_data["title"]

    user_id = message.from_user.id
    session = get_session()
    try:
        new_reminder = DBReminder(
            user_id=user_id,
            deadline=reminder_datetime,
            title=title,
            description=description
        )
        session.add(new_reminder)
        session.commit()

        await message.answer(
            MESSAGES["reminder_created"].format(
                time=reminder_datetime.strftime("%H:%M %d.%m.%Y"),
                title=title,
                description=description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            ),
            reply_markup=check_keyboard
        )
    finally:
        session.close()

    await state.clear()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@router.message(F.text == BUTTONS["confirm_reminder"])
async def confirm_reminder(message: Message):
    user_id = message.from_user.id
    session = get_session()
    try:
        result = session.execute(select(DBReminder).filter_by(user_id=user_id))
        reminders = result.scalars().all()

        if reminders:
            for reminder in reminders:
                await message.answer(
                    MESSAGES["reminder_saved"].format(
                        time=reminder.deadline.strftime("%H:%M %d.%m.%Y"),
                        title=reminder.title,
                        description=reminder.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                    ),
                    reply_markup=main_menu
                )
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–∑–¥–∞—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    finally:
        session.close()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@router.message(F.text == BUTTONS["edit_reminder"])
async def edit_reminder_command(message: Message):
    user_id = message.from_user.id
    session = get_session()
    try:
        result = session.execute(select(DBReminder).filter_by(user_id=user_id))
        reminders = result.scalars().all()

        if not reminders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        reminder_texts = [f"{r.id}. {r.title} ({r.deadline.strftime('%d.%m.%Y %H:%M')})" for r in reminders]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n" + "\n".join(reminder_texts))
    finally:
        session.close()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@router.message(Reminder.edit_time)
async def process_edit_time(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        new_time = datetime.strptime(user_input, "%H:%M").time()
        user_data = await state.get_data()
        reminder_id = user_data["reminder_id"]

        session = get_session()
        try:
            reminder = session.get(DBReminder, reminder_id)
            if not reminder:
                await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            reminder.deadline = reminder.deadline.replace(hour=new_time.hour, minute=new_time.minute)
            session.commit()

            await message.answer(f"üïí –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time.strftime('%H:%M')}.")
        finally:
            session.close()
    except ValueError:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>HH:MM</b>.")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
@router.message(Reminder.edit_date)
async def process_edit_date(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        new_date = datetime.strptime(user_input, "%d.%m.%Y").date()
        user_data = await state.get_data()
        reminder_id = user_data["reminder_id"]

        session = get_session()
        try:
            reminder = session.get(DBReminder, reminder_id)
            if not reminder:
                await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            reminder.deadline = datetime.combine(new_date, reminder.deadline.time())
            session.commit()

            await message.answer(f"üìÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_date.strftime('%d.%m.%Y')}.")
        finally:
            session.close()
    except ValueError:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>DD.MM.YYYY</b>.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(Reminder.edit_title)
async def process_edit_title(message: Message, state: FSMContext):
    new_title = message.text.strip()
    if len(new_title) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_data = await state.get_data()
    reminder_id = user_data["reminder_id"]

    session = get_session()
    try:
        reminder = session.get(DBReminder, reminder_id)
        if not reminder:
            await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        reminder.title = new_title
        session.commit()

        await message.answer(f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_title}.")
        await message.answer(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: \nüïí –í—Ä–µ–º—è: {reminder.deadline.strftime('%H:%M')}\n"
            f"üìÖ –î–∞—Ç–∞: {reminder.deadline.strftime('%d.%m.%Y')}\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {new_title}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {reminder.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
        )
        await message.answer(MESSAGES["edit_reminder"], reply_markup=main_menu)
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(Reminder.edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    new_description = message.text.strip()
    if new_description.lower() == "–Ω–µ—Ç":
        new_description = None

    user_data = await state.get_data()
    reminder_id = user_data["reminder_id"]

    session = get_session()
    try:
        reminder = session.get(DBReminder, reminder_id)
        if not reminder:
            await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        reminder.description = new_description
        session.commit()

        await message.answer(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}.")
        await message.answer(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: \nüïí –í—Ä–µ–º—è: {reminder.deadline.strftime('%H:%M')}\n"
            f"üìÖ –î–∞—Ç–∞: {reminder.deadline.strftime('%d.%m.%Y')}\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {reminder.title}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {new_description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
        )
        await message.answer(MESSAGES["edit_reminder"], reply_markup=main_menu)
    finally:
        session.close()